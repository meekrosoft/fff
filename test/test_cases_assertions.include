static int valid_assertions_, invalid_assertions_;
#define _FFF_ASSERT_EQ_MSG(EXP, ACT, MSG) if ((EXP)==(ACT)) { valid_assertions_++; } else { invalid_assertions_++; }

enum AssertionResult {
  INVALID,
  VALID
};

#define ASSERT_FAKE_ASSERTION_WAS(RSLT) \
  if((RSLT)==VALID) ASSERT_EQ(1, valid_assertions_>0); \
  ASSERT_EQ((!(RSLT)), invalid_assertions_>0)

#define RESET_FAKE_ASSERTIONS() valid_assertions_ = invalid_assertions_ = 0

//FFF_RETURN requires typeof (GCC) or decltype (MSVC, but only available in C++ mode)
#if !defined(_MSC_VER) || defined(_MSVC_LANG)
TEST_F(FFFTestSuite, variadic_return_values_should_set_return_val_given_single_value)
{
    FFF_RETURN(longfunc0, 3);
    ASSERT_EQ(3, FFF_RET(longfunc0));
    ASSERT_EQ(NULL, FFF(longfunc0).return_val_seq);
    ASSERT_EQ(0, FFF(longfunc0).return_val_seq_len);
}

TEST_F(FFFTestSuite, variadic_return_values_should_set_return_sequence_given_multiple_values)
{
    FFF_RETURN(longfunc0, 3, 2, 1);
    ASSERT_EQ(0, FFF_RET(longfunc0));
    ASSERT_EQ(3, FFF(longfunc0).return_val_seq_len);
    ASSERT_EQ(3, FFF(longfunc0).return_val_seq[0]);
    ASSERT_EQ(2, FFF(longfunc0).return_val_seq[1]);
    ASSERT_EQ(1, FFF(longfunc0).return_val_seq[2]);
}

TEST_F(FFFTestSuite, variadic_return_values)
{
    FFF_RETURN(longfunc0, 3, 7, 9);
    ASSERT_EQ(3, longfunc0());
    ASSERT_EQ(7, longfunc0());
    ASSERT_EQ(9, longfunc0());
    ASSERT_EQ(9, longfunc0());
    ASSERT_EQ(9, longfunc0());
}

TEST_F(FFFTestSuite, variadic_return_values_no_array_name_collisions_when_called_repeatedly)
{
    FFF_RETURN(longfunc0, 3, 7, 9);
    FFF_RETURN(longfunc0, 2, 4);
    ASSERT_EQ(2, longfunc0());
    ASSERT_EQ(4, longfunc0());
    ASSERT_EQ(4, longfunc0());
}

TEST_F(FFFTestSuite, variadic_return_values_no_assertion_given_single_value)
{
    FFF_RETURN(longfunc0, 1);

    ASSERT_EQ(0, valid_assertions_);
    ASSERT_EQ(0, invalid_assertions_);
}

TEST_F(FFFTestSuite, variadic_return_values_assertion_valid_given_value_sequence)
{
    FFF_RETURN(longfunc0, 1, 2, 3);

    ASSERT_FAKE_ASSERTION_WAS(VALID);
}
#endif


#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
TEST_F(FFFTestSuite, variadic_return_values_assertion_invalid_given_0_length_sequence)
{
    FFF_RETURN(longfunc0);

    ASSERT_FAKE_ASSERTION_WAS(INVALID);
}
#endif

static void _callFake(int ncalls)
{
  //... reset assertion counters
  valid_assertions_ = invalid_assertions_ = 0;
  RESET_FAKE(longfunc0);
  //... make the calls
  while(ncalls--) {
    longfunc0();
  }
}


static void do_FFF_ASSERT_CALLS_test(int ncalls_made, int ncalls_asserted)
{

  //Given
  _callFake(ncalls_made);

  //When
  FFF_ASSERT_CALLS(longfunc0, ncalls_asserted);

  //Then
  ASSERT_FAKE_ASSERTION_WAS(ncalls_made==ncalls_asserted);
}

TEST_F(FFFTestSuite, assert_calls_assertion_valid_given_match)
{
   do_FFF_ASSERT_CALLS_test(0,0);
   do_FFF_ASSERT_CALLS_test(1,1);
   do_FFF_ASSERT_CALLS_test(9,9);
}

TEST_F(FFFTestSuite, assert_calls_assertion_invalid_when_overestimated)
{
   do_FFF_ASSERT_CALLS_test(0,1);
   do_FFF_ASSERT_CALLS_test(1,3);
   do_FFF_ASSERT_CALLS_test(9,15);
}

TEST_F(FFFTestSuite, assert_calls_assertion_invalid_when_underestimated)
{
   do_FFF_ASSERT_CALLS_test(3,2);
   do_FFF_ASSERT_CALLS_test(9,7);
}

TEST_F(FFFTestSuite, assert_called_assertion_valid_when_called_once)
{
  //Given
  _callFake(1);

  //When
  FFF_ASSERT_CALLED(longfunc0);

  //Then
  ASSERT_FAKE_ASSERTION_WAS(VALID);
}

TEST_F(FFFTestSuite, assert_called_assertion_invalid_when_not_called)
{
  //Given
  _callFake(0);

  //When
  FFF_ASSERT_CALLED(longfunc0);

  //Then
  ASSERT_FAKE_ASSERTION_WAS(INVALID);
}

TEST_F(FFFTestSuite, assert_called_assertion_invalid_when_called_more_than_once)
{
  //Given
  _callFake(2);

  //When
  FFF_ASSERT_CALLED(longfunc0);

  //Then
  ASSERT_FAKE_ASSERTION_WAS(INVALID);
}

TEST_F(FFFTestSuite, assert_not_called_assertion_valid_when_not_called)
{
  //Given
  _callFake(0);

  //When
  FFF_ASSERT_NOT_CALLED(longfunc0);

  //Then
  ASSERT_FAKE_ASSERTION_WAS(VALID);
}


TEST_F(FFFTestSuite, assert_not_called_assertion_invalid_when_called_once)
{
  //Given
  _callFake(1);

  //When
  FFF_ASSERT_NOT_CALLED(longfunc0);

  //Then
  ASSERT_FAKE_ASSERTION_WAS(INVALID);
}

TEST_F(FFFTestSuite, assert_not_called_assertion_invalid_when_called_more_than_once)
{
  //Given
  _callFake(5);

  //When
  FFF_ASSERT_NOT_CALLED(longfunc0);

  //Then
  ASSERT_FAKE_ASSERTION_WAS(INVALID);
}

TEST_F(FFFTestSuite, assert_call_assertion_valid_when_all_args_specified_and_matched)
{
  //Given
  voidfunc2('a', 'b');

  //When
  FFF_ASSERT(voidfunc2, 'a', 'b');

  //Then
  ASSERT_FAKE_ASSERTION_WAS(VALID);
}

TEST_F(FFFTestSuite, assert_call_assertion_valid_when_some_args_specified_and_matched)
{
  //Given
  voidfunc2('a', 'b');

  //When
  FFF_ASSERT(voidfunc2, 'a');

  //Then
  ASSERT_FAKE_ASSERTION_WAS(VALID);
}

TEST_F(FFFTestSuite, assert_call_assertion_invalid_when_called_more_than_once)
{
  //Given
  voidfunc2('a', 'b');
  voidfunc2('a', 'b');

  //When
  FFF_ASSERT(voidfunc2, 'a', 'b');

  //Then
  ASSERT_FAKE_ASSERTION_WAS(INVALID);
}

TEST_F(FFFTestSuite, assert_call_assertion_invalid_given_arg_mismatch)
{
  //Given
  voidfunc2('a', 'b');

  //When
  FFF_ASSERT(voidfunc2, 'a', 'a');

  //Then
  ASSERT_FAKE_ASSERTION_WAS(INVALID);
}

TEST_F(FFFTestSuite, assert_nth_call_assertion_valid_given_matching_args)
{
  //Given
  voidfunc2('a', 'a');
  voidfunc2('a', 'b');
  voidfunc2('b', 'a');

  //When
  FFF_ASSERT_NTH(voidfunc2, 2, 'a', 'b');

  //Then
  ASSERT_FAKE_ASSERTION_WAS(VALID);
}

TEST_F(FFFTestSuite, assert_nth_call_assertion_invalid_given_arg_mismatch)
{
  //Given
  voidfunc2('a', 'a');
  voidfunc2('a', 'b');
  voidfunc2('b', 'a');

  //When
  FFF_ASSERT_NTH(voidfunc2, 3, 'a', 'b');

  //Then
  ASSERT_FAKE_ASSERTION_WAS(INVALID);
}

TEST_F(FFFTestSuite, assert_last_call_assertion_valid_given_multiple_calls)
{
  //Given
  voidfunc2('a', 'a');
  voidfunc2('a', 'b');

  //When
  FFF_ASSERT_LAST(voidfunc2, 'a', 'b');

  //Then
  ASSERT_FAKE_ASSERTION_WAS(VALID);
}

TEST_F(FFFTestSuite, assert_last_call_assertion_invalid_given_previous_call_args)
{
  //Given
  voidfunc2('a', 'a');
  voidfunc2('a', 'b');

  //When
  FFF_ASSERT_LAST(voidfunc2, 'a', 'a');

  //Then
  ASSERT_FAKE_ASSERTION_WAS(INVALID);
}

#ifdef __GNUC__
TEST_F(FFFTestSuite, assert_any_call_assertion_valid_given_any_match)
{
  //Given
  voidfunc2('a', 'a');
  voidfunc2('a', 'b');
  voidfunc2('b', 'a');

  //When
  FFF_ASSERT_ANY(voidfunc2, 'a', 'b');
  FFF_ASSERT_ANY(voidfunc2, 'a', 'a');
  FFF_ASSERT_ANY(voidfunc2, 'b', 'a');

  //Then
  ASSERT_FAKE_ASSERTION_WAS(VALID);
}

TEST_F(FFFTestSuite, assert_any_call_assertion_invalid_given_no_match)
{
  //Given
  voidfunc2('a', 'a');
  voidfunc2('a', 'b');
  voidfunc2('b', 'a');

  //When
  FFF_ASSERT_ANY(voidfunc2, 'a', 'c');

  //Then
  ASSERT_FAKE_ASSERTION_WAS(INVALID);
}

TEST_F(FFFTestSuite, assert_no_call_assertion_invalid_given_any_match)
{
  //Given
  voidfunc2('a', 'a');
  voidfunc2('a', 'b');
  voidfunc2('b', 'a');

  //When
  FFF_ASSERT_NONE(voidfunc2, 'a', 'a');

  //Then
  ASSERT_FAKE_ASSERTION_WAS(INVALID);
}

TEST_F(FFFTestSuite, assert_no_call_assertion_valid_given_no_match)
{
  //Given
  voidfunc2('a', 'a');
  voidfunc2('a', 'b');
  voidfunc2('b', 'a');

  //When
  FFF_ASSERT_NONE(voidfunc2, 'a', 'c');

  //Then
  ASSERT_FAKE_ASSERTION_WAS(VALID);
}
#endif
